@startuml plane-game
top to bottom direction
skinparam nodesep 120
skinparam ranksep 120
skinparam linetype polyline

class Bullet {
  + Bullet(double, double, float, double, float)
  ----
  - x: double
  - y: double
  - speed: float
  - shape: Shape
  - angle: float
  - color: Color
  - size: double
  ----
  + update(): void
  + draw(Graphics2D): void
  + check(int, int): boolean
}
class Effect {
  + Effect(double, double, int, int, double, float, Color)
  ----
  - x: double
  - y: double
  - speed: float
  - color: Color
  - booms: ModelBoom[]
  ----
  + update(): void
  + draw(Graphics2D): void
  + check(): boolean
}
class HP {
  + HP(double, double)
  + HP()
  ----
  - currentHp: double
  - MAX_HP: double
  ----
  + getMAX_HP(): double
  + getCurrentHp(): double
  + setMAX_HP(double): void
  + setCurrentHp(double): void
}
class HpRender {
  + HpRender(HP)
  ----
  - hp: HP
  ----
  # hpRender(Graphics2D, Shape, double): void
  + updateHP(double): boolean
  + resetHP(): void
  + getHP(): double
}
class Key {
  + Key()
  ----
  - key_left: boolean
  - key_right: boolean
  - key_space: boolean
  ...
  ----
  + isKey_left(): boolean
  + isKey_right(): boolean
  + isKey_space(): boolean
  ...
  + setKey_left(boolean): void
  + setKey_right(boolean): void
  + setKey_space(boolean): void
  ...
}
class Main {
  + Main()
  ----
  + main(String[]): void
  - init(): void
}
class ModelBoom {
  + ModelBoom(double, float)
  ----
  + ModelBoom(): 
  - size: double
  - angle: float
  ----
  + setSize(double): void
  + setAngle(float): void
  + getSize(): double
  + getAngle(): float
}
class PanelGame {
  + PanelGame()
  ----
  - bullets: List<Bullet>
  - sound: Sound
  - player: Player
  - key: Key
  - image: BufferedImage
  - g2: Graphics2D
  - rockets: List<Rocket>
  - boomEffects: List<Effect>
  ----
  + start(): void
  - drawGame(): void
  - sleep(long): void
  - initKeyboard(): void
  - drawBackground(): void
  - render(): void
  - addRocket(): void
  - checkPlayer(Rocket): void
  - initObjectGame(): void
  - resetGame(): void
  - checkBullets(Bullet): void
  - initBullets(): void
}
class Player {
  + Player()
  ----
  + PLAYER_SIZE: double
  + MAX_SPEED: float
  - x: double
  - y: double
  - speed: float
  - angle: float
  - image: Image
  - playerShape: Area
  - alive: boolean
  ----
  + update(): void
  + draw(Graphics2D): void
  + changeLocation(double, double): void
  + reset(): void
  + speedUp(): void
  + speedDown(): void
}
class Rocket {
  + Rocket()
  ----
  + ROCKET_SIZE: double
  - x: double
  - y: double
  - speed: float
  - image: Image
  - angle: float
  - rocketShape: Area
  ----
  + update(): void
  + draw(Graphics2D): void
  + changeLocation(double, double): void
  + changeAngle(float): void
  + check(int, int): boolean
}
class Sound {
  + Sound()
  ----
  - hit: URL
  - destroy: URL
  - shoot: URL
  ----
  + soundHit(): void
  + soundShoot(): void
  + soundDestroy(): void
}

Effect    "1" *-[#595959,plain]-> "booms\n1" ModelBoom 
HpRender  "1" *-[#595959,plain]-> "hp\n1" HP        
Main       -[#595959,dashed]->  PanelGame : "«create»"
PanelGame "1" *-[#595959,plain]-> "bullets\n*" Bullet    
PanelGame "1" *-[#595959,plain]-> "boomEffects\n*" Effect    
PanelGame "1" *-[#595959,plain]-> "key\n1" Key       
PanelGame "1" *-[#595959,plain]-> "player\n1" Player    
PanelGame "1" *-[#595959,plain]-> "rockets\n*" Rocket    
PanelGame "1" *-[#595959,plain]-> "sound\n1" Sound     
Player     -[#000082,plain]-^  HpRender  
Rocket     -[#000082,plain]-^  HpRender  
@enduml
