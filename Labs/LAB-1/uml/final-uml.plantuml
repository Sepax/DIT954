@startuml new-uml
skinparam nodesep 120
skinparam ranksep 120
skinparam Linetype polyline

    

    package model {
        Vehicle             <|-- Saab95
        Vehicle             <|-- Volvo240
        Vehicle             <|-- Scania
        Vehicle             <|-- Hauler
        Vehicle             <|-- Ferry

        Vehicle             *-- Position
        Vehicle             *-- Facing

        Volvo240            *-- Trim
        Saab95              *-- Turbo
        Hauler              *-- Cargo
        Ferry               *-- Cargo
        Hauler              *-- Ramp
        Ferry               *-- Ramp
        Garage              *-- Cargo
        Scania              *-- FlatBed
        Ramp                *-- RampState
        VehicleService      *.. Vehicle
        VehicleFactory      <.. Vehicle

        World               --> Application
    }

    package interfaces {
        IVehicle <|-- ICargo
        IVehicle <|-- IFlatBed
        IVehicle <|-- IRamp
        IVehicle <|-- ITrim 
        IVehicle <|-- ITurbo
        Movable             <.. Vehicle
        
        World               o.. IVehicle
        
    }


    package view {
        VehicleView         *-- DrawPanel
        DrawPanel           <.. ImageHandler
    }

    package controller {     
        VehicleController   *-- TimeListener
        VehicleController   *-- VehicleView
        VehicleController   *-- EventHandler
    }

    Application             *-- VehicleService
    VehicleController       *-- Vehicle
    Application             *-- VehicleController
    Application             <.. VehicleFactory
    EventHandler            *-- VehicleService

    ITurbo <.. Saab95
    ITrim <.. Volvo240
    ICargo <.. Hauler
    ICargo <.. Ferry
    IRamp <.. Hauler
    IRamp <.. Ferry
    IFlatBed <.. Scania
    
    class World {
        -vehicles: ArrayList<IVehicle>
        -view: VehicleView
        -cc: VehicleController
    }



    interface Movable {

    }

    /' Position, etc '/

    class Position {
        -x: double
        -y: double
        +setX(double x)
        +setY(double y)
        +getX()
        +getY()
    }

    /' Enums '/

    enum Facing {
        NORTH
        EAST
        SOUTH
        WEST
    }

    enum RampState {
        RAISED
        LOWERED
    }

    /' Vehicle Class '/
    
    abstract Vehicle {
        -modelName: String
        -color: Color
        -position: Position
        -facing: Facing
        -speed: double
        -weight: double
        -enginePower: double
        -imagePath: String

        +startEngine()
        +stopEngine()
        +gas(double amount)
        +brake(double amount)
        +turnLeft()
        +turnRight()
        +move()

        +setModelName(String name)
        +setColor(Color color)
        +setPosition(Position pos)
        +setFacing(Facing facing)
        +setSpeed(double speed)
        +setWeight(double weight)
        +setEnginePower(double power)

        +getModelName()
        +getColor()
        +getPosition()
        +getFacing()
        +getSpeed()
        +getWeight()
        +getEnginePower()
        +getAcceleration()
    }

    /' Vehicles '/

    class Saab95 {
        getAcceleration()
    }

    class Volvo240 {


    }
    class Scania {

    }

    class Hauler{
        -cargo: Cargo
        -ramp: Ramp
        +getCargo()
        +getRamp()
        +lowerRamp()
        +raiseRamp()
        +loadVehicle()
        +unloadVehicle()
        +move()
    }

    class Ferry {
        -cargo: Cargo
        -ramp: Ramp
        +getCargo()
        +getRamp()
        +lowerRamp()
        +raiseRamp()
        +loadVehicle()
        +unloadVehicle()
        +move()
    }

    /' Vehicle Components '/

    class Cargo{
        -vehicles: Deque<T>
        -double: weightCap
        -int: slots

        +peek()
        +push(T object)
        +pop()
        +removeLast()
        +getContent()
    }

    class Ramp {
        -state: RampState
        raiseRamp()
        lowerRamp()
        getState()
    }

    class Garage {

    }

    class FlatBed {
        -tilt: double
        setTilt(double tilt)
        getTilt()
    }

    class Turbo {
        on()
        off()
        getState()
    }

    class Trim {
        getFactor()
    }

    /' View '/

    class DrawPanel {


        +DrawPanel(int x, int y)
        +paintComponent(Graphics g)
    }

    class VehicleController {
        -delay: int
        -timer: Timer
        -CarView: frame;
        -ArrayList<Vehicle> vehicles;
        -EventHandler: eventHandler;
        -VehicleService service;
        
        +startController()
    }

    class VehicleView <extends JFrame> {
        -X: int
        -Y: int
        -DrawPanel: drawPanel;
        
        -initComponents(String title)
    }

    class Application {
        -vehicles: ArrayList<Vehicle>
        -view: VehicleView
        -cc: VehicleController
        main(String[] args)
        update()
    }

    class VehicleService {
        -vehicles: ArrayList<Vehicle>
        -double: newCarY

        +start()
        +stop()
        +gas()
        +brake()
        +EnableTurbo()
        +disableTurbo()
        +liftBed()
        +lowerBed()
        +reverseDirection()
        +hasBumpedInWall()
        +addRandomVehicle()
        +addVehicle(Vehicle vehicle)
        +removeVehicle()
        +getVehicles()
    }

    class ImageHandler {
        getPoint(Vehicle vehicle)
        getImage(Vehicle vehicle)
    }

    class VehicleFactory {
        createSaab95()
        createVolvo240()
        createScania()
        createHauler()
        createFerry()
    }

    class EventHandler {
        -VehicleService: vehicleService;
        initActionListeners()
    }

    class TimeListener {
        -cars: List<Vehicle>
        -vehicleService: VehicleService
        -frame: VehicleView
        +actionPerformed(ActionEvent e)
    }

    TimeListener *-- VehicleService
    TimeListener *-- VehicleView
    TimeListener *-- Vehicle

    interface IVehicle {
        +startEngine()
        +stopEngine()
        +gas(double amount)
        +brake(double amount)
        +turnLeft()
        +turnRight()
        +move()
    }

    interface IVehicle{
    }

    interface ITrim{

    }

    interface ICargo{

    }

    interface ITurbo {

    }

    interface IFlatBed {

    }

    interface IRamp {

    }


    

@enduml
